<h1>Entry</h1>
<%= if @entry.id != nil do %>
<div>
  <a href="<%= Routes.entries_path(@conn, :show, @entry.id) %>">view</a>
  <%= form_for @conn, Routes.entries_path(@conn, :destroy, @entry.id), [method: :post, class: :link], fn _f -> %>
    <%= submit "delete", class: :link %>
  <% end %>
</div>
<% end %>

<hr/>

<p>This page will give the possibility to create a new
entry. An entry is a data-structure containing raw information
(text, image, video). These information will be parsed and
splitted in multiple way, based on specific hashtag and
keywords.</p>

<p>This raw data-structure will give birth to a campaign,
multiple entries for different social network. By default,
every connected social network to the user will be used.</p>

<p>The frequency can be set directly on the page. Usually, two
frequencies exist, one based on fixed amount time (the default
one), one message each hour for example. Another method, based
on "smart" analysis, will post the message based on a good time
period based on the followers.</p>

<div class="column">
  <input name="name" type="text" value="<%= @entry.name %>" />
  <div id="editor" class="container">
    <%= @entry.content %>
  </div>
  <button id="send-button">send</button>
  <%= form_for @conn, "/entry", [as: :entry, multipart: true], fn _f -> %>
  <% end %>
  <%= if @entry.id != nil do %>
    <%= form_for @conn, Routes.entries_path(@conn, :destroy, @entry.id), [method: :post], fn _f -> %>
      <%= submit "delete" %>
    <% end %>
  <% end %>
</div>

<script src="/js/quill.js"></script>
<script>
  /* create a new editor*/
  var quill = new Quill('#editor', {
      theme: 'snow',
      modules: {
        toolbar: [
          { 'header': [1, 2, 3, 4, 5, 6, false] },
          'bold', 'italic', 'underline', 'strike','link', 'image'
        ]
      }
  });

  /* get the token and return it */
  function get_token() {
      c = document.getElementsByTagName("form")[0].getElementsByTagName('input');
      return c._csrf_token.value;
  }

  /* vanilla js to send editor event to our service */
  function send(delta, oldDelta, source) {
      var retain = delta.ops[0].retain;
      var insert = delta.ops[1].insert;
      var params = JSON.stringify({ "retain": retain, "insert": insert });
      const req = new XMLHttpRequest();
      req.open('POST', '/post', true);
      req.setRequestHeader("x-csrf-token", get_token());
      req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      // req.setRequestHeader("Content-length", params.length);
      // req.setRequestHeader("Connection", "close");
      req.send(params);
  }

  /* send entry button */
  function send_button(quill) {
      var content = quill.getContents();
      var json = JSON.stringify({
        entry: {
          content: content.ops[0].insert,
          name:    document.getElementsByName("name")[0].value
        }
      });
      const req = new XMLHttpRequest();
      req.open('<%= @submit_method %>', '<%= @submit_url %>', true);
      req.setRequestHeader("x-csrf-token", get_token());
      req.setRequestHeader("Content-type", "application/json");
      // req.setRequestHeader("Content-length", json.length);
      // req.setRequestHeader("Connection", "close");
      req.send(json);
  }
  
  /* each text-change events are forwarded to send function */
  // quill.on('text-change', send);
  document.getElementById("send-button").onclick = function() { send_button(quill); };
</script>
